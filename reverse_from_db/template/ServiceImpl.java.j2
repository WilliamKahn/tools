package {{ packages['ServiceImpl'] }};

import {{ packages['Model'] }}.{{ TableName }};
import {{ packages['DAO'] }}.{{ TableName }}DAO;
import {{ packages['Service'] }}.{{ TableName }}Service;
import {{ packages['QueryVo'] }}.{{ TableName }}QueryVo;
import {{ packages['Vo'] }}.{{ TableName }}Vo;
import {{ packages['ListVo'] }}.{{ TableName }}ListVo;
import {{ packages['CreateVo'] }}.{{ TableName }}CreateVo;
import {{ packages['UpdateVo'] }}.{{ TableName }}UpdateVo;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import javax.annotation.Resource;
import java.util.List;

/**
 * @author {{ author }}
 */
@Service
public class {{ TableName }}ServiceImpl implements {{ TableName }}Service {

    @Resource
    private {{ TableName }}DAO {{ tableName }}DAO;

    @Override
    public void create{{ TableName }}({{ TableName }}CreateVo {{ tableName }}CreateVo) {
        {{ TableName }} {{ tableName }} = new {{ TableName }}();
        BeanUtils.copyProperties({{ tableName }}CreateVo, {{ tableName }});
        {{ tableName }}DAO.save({{ tableName }});
    }

    @Override
    public void update{{ TableName }}({{ TableName }}UpdateVo {{ tableName }}UpdateVo) {
        {{ TableName }} {{ tableName }} = new {{ TableName }}();
        BeanUtils.copyProperties({{ tableName }}UpdateVo, {{ tableName }});
        {{ tableName }}DAO.updateById({{ tableName }});
    }

    @Override
    public void delete{{ TableName }}(List<{{ id_type }}> {{ primary_key }}s) {
        {{ tableName }}DAO.removeBatchByIds({{ primary_key }}s);
    }

    @Override
    public {{ TableName }}Vo get{{ TableName }}({{ id_type }} {{ primary_key }}) {
        {{ TableName }} {{ tableName }} = {{ tableName }}DAO.getById({{ primary_key }});
        {{ TableName }}Vo result = new {{ TableName }}Vo();
        BeanUtils.copyProperties({{ tableName }}, result);
        return result;
    }

    @Override
    public PageInfo<{{ TableName }}ListVo> page{{ TableName }}({{ TableName }}QueryVo {{ tableName }}QueryVo) {
        PageHelper.startPage(dto.getPageNum(), dto.getPageSize());
        List<{{ TableName }}> list = {{ tableName }}DAO.list({{ tableName }}QueryVo);
        PageInfo result = new PageInfo<>(list);
        List<{{ TableName }}ListVo> listVo = list.stream().map(entity -> {
            {{ TableName }}ListVo vo = new {{ TableName }}ListVo();
            BeanUtils.copyProperties(entity, vo);
            return vo;
        }).collect(Collectors.toList());
        result.setList(listVo);
        return result;
    }
}
